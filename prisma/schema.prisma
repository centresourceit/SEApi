// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum QuestionType {
  MCQ
  SLIDER
  TANDF
  PERCENTAGE
}

enum QuestionPlan {
  FREE
  PAID
  BOTH
}

enum LicenseType {
  FREE
  BUSINESS
  PREMIUM
  PLATINUM
}

enum Role {
  SYSTEM
  ADMIN
  USER
}

enum Result {
  MET
  NOTMET
  REVIEW
  ONGOING
}

enum FeedbackType {
  General_Feedback
  Suggestions
  Bug_Report
  New_Question_Request
  New_Feature_Request
}

enum ExperienceRate {
  POOR
  SATISFACTORY
  GOOD
  VERY_GOOD
  EXCELLENT
}

model principle {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String          @db.MediumText
  status        Status          @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  question_bank question_bank[]
}

model question_bank {
  id            Int                  @id @default(autoincrement())
  principle     principle            @relation(fields: [principleId], references: [id])
  principleId   Int
  complince     compliance           @relation(fields: [complianceId], references: [id])
  complianceId  Int
  questionRefId Int?
  questioncode  String
  version       Int
  questionType  QuestionType         @default(TANDF)
  questionPlan  user_licenses_master @relation(fields: [licensesId], references: [id])
  licensesId    Int
  question      String
  description   String?              @db.MediumText
  answer        Json
  status        Status               @default(ACTIVE)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
}

model user_licenses_master {
  id                 Int                  @id @default(autoincrement())
  licenseType        LicenseType          @default(FREE)
  name               String
  paymentAmount      Int                  @default(0)
  discountAmount     Int                  @default(0)
  discountValidTill  DateTime?
  questionAllowed    Int                  @default(0)
  projectPerLicense  Int
  status             Status               @default(ACTIVE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  user_license_slave user_license_slave[]
  question_bank      question_bank[]
}

model user_license_slave {
  id                Int                  @id @default(autoincrement())
  licenseType       user_licenses_master @relation(fields: [licenseTypeId], references: [id])
  licenseTypeId     Int
  paymentStatus     Status               @default(INACTIVE)
  licenseValidity   DateTime
  user              user                 @relation(fields: [userId], references: [id])
  userId            Int
  paymentReference  String
  paymentAmount     Int                  @default(0)
  status            Status               @default(ACTIVE)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  deletedAt         DateTime?
  assesement_result assesement_result[]
}

model user {
  id                 Int                  @id @default(autoincrement())
  name               String?
  email              String
  password           String
  contact            String?
  company            company?             @relation(fields: [companyId], references: [id])
  companyId          Int?
  address            String?
  profession         String?
  role               Role                 @default(USER)
  status             Status               @default(ACTIVE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  user_license_slave user_license_slave[]
  assesement_result  assesement_result[]
  project            project[]
  feedback           feedback[]
}

model company {
  id          Int       @id @default(autoincrement())
  name        String
  logo        String
  website     String
  email       String
  ctoContact  String
  description String    @db.MediumText
  address     String
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        user[]
}

model project {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String              @db.MediumText
  createdUser       user                @relation(fields: [createdUserId], references: [id])
  createdUserId     Int
  status            Status              @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  assesement_result assesement_result[]
}

model assesement_result {
  id                 Int                       @id @default(autoincrement())
  user               user                      @relation(fields: [userId], references: [id])
  userId             Int
  project            project                   @relation(fields: [projectId], references: [id])
  projectId          Int
  license            user_license_slave        @relation(fields: [licenseId], references: [id])
  licenseId          Int
  assesement         assesement_result_revised @relation(fields: [assesementId], references: [id])
  assesementId       Int
  totalScore         Int
  resultStatus       Result                    @default(REVIEW)
  certified          Status                    @default(INACTIVE)
  certificatedId     String
  certificatePrivacy Status                    @default(INACTIVE)
  adminComments      String?
  status             Status                    @default(ACTIVE)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  deletedAt          DateTime?
}

model assesement_result_revised {
  id                Int                 @id @default(autoincrement())
  result            Json
  status            Status              @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  assesement_result assesement_result[]
}

model compliance {
  id            Int             @id @default(autoincrement())
  logo          String
  name          String
  description   String          @db.MediumText
  LearnMoreLink String
  status        Status          @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  question_bank question_bank[]
}

model feedback {
  id             Int            @id @default(autoincrement())
  user           user           @relation(fields: [userId], references: [id])
  userId         Int
  feedbackType   FeedbackType   @default(New_Feature_Request)
  comments       Json
  resultComment  String         @db.MediumText
  experienceRate ExperienceRate @default(POOR)
  toolComment    String         @db.MediumText
  generalComment String?        @db.MediumText
  email          String?
  status         Status         @default(ACTIVE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model contact {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  description String
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}
